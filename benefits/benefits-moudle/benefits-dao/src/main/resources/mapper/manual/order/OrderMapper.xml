<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lx.benefits.mapper.order.OrderMapper">


    <sql id="page_where">
        <where>
            o.level=3
            <!--and o.status !=0-->
            <if test="status!=null">
                and o.status = #{status}
            </if>
            <if test="payChannel!=null">
                and op.pay_channel = #{payChannel}
            </if>
            <if test="sellerOrderNumber!=null">
                and o.parent_number = #{sellerOrderNumber}
            </if>
            <if test="number!=null">
                and o.number =#{number}
            </if>
            <if test="loginName!=null">
                and e.loginName = #{loginName}
            </if>
            <if test="shipToMobile!=null">
                and os.ship_to_mobile=#{shipToMobile}
            </if>
            <if test="orderCreateTimeStart != null">
                and o.create_time >= #{orderCreateTimeStart}
            </if>
            <if test="orderCreateTimeEnd != null">
                <![CDATA[
					 and o.create_time <= #{orderCreateTimeEnd}
					]]>
            </if>
            <if test="categoryId!=null">
                and p.category_id =#{categoryId}
            </if>
            <if test="categoryId2!=null">
                and p.category_id2 =#{categoryId2}
            </if>
            <if test="categoryId3!=null">
                and p.category_id3= #{categoryId3}
            </if>
            <if test="sellerId!=null">
                and seller.id=#{sellerId}
            </if>
            <if test="productBrandId!=null">
                and p.brand_id = #{productBrandId}
            </if>
            <if test="enterprId!=null and enterprId != '' ">
                and ent.enterpr_id = #{enterprId}
            </if>
        </where>
    </sql>
    <!--针对供应商平台订单查询 待支付和已取消不查询-->
    <sql id="select_where">
        <where>
            o.level=3
            <if test="status==null">
                and o.status not in (0,1)
            </if>
            <if test="status!=null">
                and o.status = #{status}
            </if>
            <if test="title!=null and title != '' ">
                and po.title like concat ('%',#{title},'%')
            </if>
            <if test="payChannel!=null">
                and op.pay_channel = #{payChannel}
            </if>
            <if test="sellerOrderNumber!=null">
                and o.parent_number = #{sellerOrderNumber}
            </if>
            <if test="number!=null">
                and o.number =#{number}
            </if>
            <if test="loginName!=null">
                and e.loginName = #{loginName}
            </if>
            <if test="shipToMobile!=null">
                and os.ship_to_mobile=#{shipToMobile}
            </if>
            <if test="orderCreateTimeStart != null">
                and o.create_time >= #{orderCreateTimeStart}
            </if>
            <if test="orderCreateTimeEnd != null">
                <![CDATA[
					 and o.create_time <= #{orderCreateTimeEnd}
					]]>
            </if>
            <if test="categoryId!=null">
                and p.category_id =#{categoryId}
            </if>
            <if test="categoryId2!=null">
                and p.category_id2 =#{categoryId2}
            </if>
            <if test="categoryId3!=null">
                and p.category_id3= #{categoryId3}
            </if>
            <if test="sellerId!=null">
                and seller.id=#{sellerId}
            </if>
            <if test="productBrandId!=null">
                and p.brand_id = #{productBrandId}
            </if>
            <if test="enterprId!=null and enterprId != '' ">
                and ent.enterpr_id = #{enterprId}
            </if>
        </where>
    </sql>
    <select id="selectItemOrderList" resultType="com.lx.benefits.bean.vo.order.ItemOrderListVO">
        select
        o.number,
        o.parent_number as sellerOrderNumber,
        o.third_order_number as thirdOrderNumber ,
        o.buyer_comment as buyerComment,
        o.seller_comment as sellerComment,
        o.source,
        e.loginName,
        o.voucher_benefit/100 as voucherBenefit,
        p.brand_name as brandName,
        p.item_number as itemNumber,
        po.sku_id as skuId,
        sk.sku_code as skuCode,
        sk.spu_code as spuCode,
        po.title,
        po.title_en as titleEn,
        po.image,
        po.spec as goodsSpec,
        po.cost_price/100 as costPrice,
        po.now_price/100 as price,
        po.price/100 as marketPrice,
        o.status,
        o.reverse_status as reverseStatus,
        ifnull(op.pay_channel,0) as payChannel,
        seller.name as sellerName,
        ent.enterpr_name as enterprName,
        os.ship_to_name as shipToName,
        os.ship_to_mobile as shipToMobile,
        os.id_card_no as idCardNo,
        concat(os.ship_to_province,os.ship_to_city,os.ship_to_district,os.ship_to_town,os.ship_to_address) as address,
        (o.price+o.ship_expense+o.point_amount+o.ship_expense_point_amount) /100 as totalPrice,
        (o.ship_expense + o.ship_expense_point_amount) /100 as totalFreightPrice,
        (o.point_amount + o.ship_expense_point_amount) /100 as totalPoint,
        (o.price+o.ship_expense) /100 as totalRealPrice,
        o.quantity,
        c1.name as category1Name,
        c2.name as category2Name,
        c3.name as category3Name,
        o.create_time as createTime,
        o.pay_time as payTime,
        o.ship_time as shipTime,
        o.cancel_time as cancelTime
        from `order` o
        inner join order_ship os on o.parent_number = os.order_number
        inner join product_order_ex po on o.number = po.order_number
        inner join supplier_info seller on o.seller_id = seller.id
        inner join employee_user_info e on o.buyer_user_id = e.employeeId
        inner join product p on o.spu_code = p.spu_code
        inner join sku sk on sk.id = po.sku_id
        inner join enterpr_user_info ent on e.enterprId = ent.enterpr_id
        left join category c1 on c1.id=p.category_id
        left join category c2 on c2.id=p.category_id2
        left join category c3 on c3.id=p.category_id3
        left join order_pay op on o.pay_id = op.`id`
        <include refid="page_where"/>
        order by o.id desc
        <include refid="common.Pagination_Limit"/>
    </select>

    <select id="selectItemOrderCount" resultType="int">
        select
        count(1)
        from `order` o
        inner join order_ship os on o.parent_number = os.order_number
        inner join product_order_ex po on o.number = po.order_number
        inner join supplier_info seller on o.seller_id = seller.id
        inner join employee_user_info e on o.buyer_user_id = e.employeeId
        inner join product p on o.spu_code = p.spu_code
        inner join sku sk on sk.id = po.sku_id
        inner join enterpr_user_info ent on e.enterprId = ent.enterpr_id
        left join order_pay op on o.pay_id = op.`id`
        <include refid="page_where"/>
    </select>

    <select id="selectByNumberAndLevel" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        `order`
        <where>
            `NUMBER`=#{number,jdbcType=BIGINT}
            AND `LEVEL`=#{level,jdbcType=TINYINT}
        </where>
    </select>

    <select id="selectByParentNumberAndLevel" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        `order`
        <where>
            `PARENT_NUMBER`=#{parentNumber,jdbcType=BIGINT}
            AND `LEVEL`=#{level,jdbcType=TINYINT}
        </where>
    </select>

    <select id="selectByParentNumbersAndLevel" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        `order`
        <where>
            <foreach collection="parentNumberList" item="parentNumber" separator="," open=" PARENT_NUMBER in ("
                     close=")" index="i">
                #{parentNumber,jdbcType=BIGINT}
            </foreach>
            AND `LEVEL`=#{level,jdbcType=TINYINT}
        </where>
    </select>
	
	<select id="selectByUserIdAndLevel" resultType="java.lang.Long">
        select DISTINCT parent_number from `order`  INNER JOIN card_key_storage on parent_number = parent_order_number and `level` = 3 
		and `order`.buyer_user_id = #{accountId} order by `order`.id desc limit #{startRecord},#{pageSize}
    </select>

    <select id="selectUserSellerOrderList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        `order`
        <where>
            `BUYER_USER_ID`=#{buyerUserId,jdbcType=BIGINT}
            <if test="status!=null">AND `STATUS`=#{status,jdbcType=SMALLINT}</if>
            <if test="reverseStatus!=null">AND `REVERSE_STATUS`=#{reverseStatus,jdbcType=TINYINT}</if>
            and `level` = 2
            and visible =0
        </where>
        order by id desc
        <include refid="common.Pagination_Limit"/>
    </select>

    <select id="selectUserSellerOrderCount" resultType="integer">
        SELECT
        count(1)
        FROM
        `order`
        <where>
            `BUYER_USER_ID`=#{buyerUserId,jdbcType=BIGINT}
            <if test="status!=null">AND `STATUS`=#{status,jdbcType=SMALLINT}</if>
            <if test="reverseStatus!=null">AND `REVERSE_STATUS`=#{reverseStatus,jdbcType=TINYINT}</if>
            and `level` = 2
            and visible =0
        </where>
    </select>

    <select id="selectUserOrderOverview" resultType="com.lx.benefits.bean.bo.order.UserOrderOverviewBO">
		select
			count(if(level=2,true ,null )) as allCount,
			count(if(status=0 and level=2,true ,null )) as unPayCount,
			count(if(status=2 and level=2,true ,null )) as payCount,
			count(if(status=3 and level=2,true ,null )) as sendCount,
			count(if(status=6 and level=2,true ,null )) as completeCount,
			count(if(reverse_status!=0 and level=3,true ,null )) as refundCount
		from `order`
		where buyer_user_id =#{buyerUserId}
	</select>


    <select id="selectOvertimePaymentOrderList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        `order`
        where
        create_time  <![CDATA[ < ]]> #{createTime}
        <if test="minId!=null">
            and id > #{minId}
        </if>
        and status =0
        and `level` =2
        order by id
        <include refid="common.Pagination_Limit"/>

    </select>

    <select id="selectOvertimePaymentSeckillOrderList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        `order`
        where
        create_time  <![CDATA[ < ]]> #{createTime}
        <if test="minId!=null">
            and id > #{minId}
        </if>
        and status =0
        and `level` =2
        and seckill_id !=''
        order by id
        <include refid="common.Pagination_Limit"/>

    </select>

    <select id="selectNeedOverOrderList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        `order`
        where
        ship_time  <![CDATA[ < ]]> #{shipTime}
        <if test="minId!=null">
            and id > #{minId}
        </if>
        and status =3
        and `level` =2
        order by id
        <include refid="common.Pagination_Limit"/>

    </select>

    <select id="selectReverseOrderCount" resultType="com.lx.benefits.bean.bo.order.SellerOrderReverseOverviewBO">
		select
			if(reverse_status in (2, 4),true ,false ) as overCount,
			if(reverse_status,true ,false ) as allCount
		from `order`
		where parent_number=#{sellerOrderNumber} and level=3
		group by parent_number
	</select>

    <select id="selectSellerPaidOrderListByLevel" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from
        `order`
        where
        `seller_id` = #{sellerId}
        and status =2
        and `level` = #{level}
    </select>

    <insert id="insertBatch">
        INSERT INTO `order`
        (
        `NUMBER`,
        `PARENT_NUMBER`,
        `LEVEL`,
        `STATUS`,
        `MARKETPLACE`,
        `PLATFORM`,
        `PRICE`,
        `POINT_AMOUNT`,
        `CARD_AMOUNT`,
        `QUANTITY`,
        `BUYER_USER_ID`,
        `SELLER_ID`,
        `SPU_CODE`,
        `SKU_ID`,
        `CAMPAIGN_ID`,
        `SHIP_EXPENSE`,
        `SHIP_EXPENSE_POINT_AMOUNT`,
        `THIRD_ORDER_NUMBER`,
        `SOURCE`,
        `BUYER_COMMENT`,
        num,
        voucher_benefit,
        voucher_id,
        seckill_id
        ) VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.number,jdbcType=BIGINT},
            #{item.parentNumber,jdbcType=BIGINT},
            #{item.level,jdbcType=TINYINT},
            #{item.status,jdbcType=SMALLINT},
            #{item.marketplace,jdbcType=SMALLINT},
            #{item.platform,jdbcType=TINYINT},
            #{item.price,jdbcType=BIGINT},
            #{item.pointAmount,jdbcType=BIGINT},
            #{item.cardAmount,jdbcType=BIGINT},
            #{item.quantity,jdbcType=INTEGER},
            #{item.buyerUserId,jdbcType=BIGINT},
            #{item.sellerId,jdbcType=BIGINT},
            #{item.spuCode,jdbcType=BIGINT},
            #{item.skuId,jdbcType=BIGINT},
            #{item.campaignId,jdbcType=BIGINT},
            #{item.shipExpense,jdbcType=INTEGER},
            #{item.shipExpensePointAmount,jdbcType=INTEGER},
            #{item.thirdOrderNumber,jdbcType=VARCHAR},
            #{item.source,jdbcType=TINYINT},
            #{item.buyerComment,jdbcType=VARCHAR},
            #{item.num,jdbcType=INTEGER},
            #{item.voucherBenefit,jdbcType=BIGINT},
            #{item.voucherId,jdbcType=BIGINT},
            #{item.seckillId,jdbcType=BIGINT}
            )
        </foreach>
    </insert>

    <update id="updateSellerOrderStatus2Cancel">
        UPDATE `order`
        <set>
            `STATUS`=#{status,jdbcType=SMALLINT},
            `STATUS_EX`=#{statusEx,jdbcType=SMALLINT},
            `cancel_time` = now()
        </set>
        <where>
            `NUMBER`=#{number,jdbcType=BIGINT}
            <if test="buyerUserId!=null and buyerUserId!=0">
                AND `BUYER_USER_ID`=#{buyerUserId,jdbcType=BIGINT}
            </if>
            AND `LEVEL`= 2
            AND `STATUS` in (0,2)
        </where>
    </update>
    <update id="updateItemOrderStatus2Cancel">
        UPDATE `order`
        <set>
            `STATUS`= #{status},
            `STATUS_EX`= #{statusEx},
            `cancel_time` = now()
            <!--<if test="status=2" >-->
            <!--,`REVERSE_STATUS` = 4-->
            <!--</if>-->
            <!--<if test="status=0" >-->
            <!--,`REVERSE_STATUS` = 2-->
            <!--</if>-->
        </set>
        <where>
            `PARENT_NUMBER` = #{sellerOrderNumber,jdbcType=BIGINT}
            <if test="buyerUserId!=null and buyerUserId!=0">
                AND `BUYER_USER_ID`=#{buyerUserId,jdbcType=BIGINT}
            </if>
            AND `LEVEL`= 3
            AND `STATUS` in (0,2)
        </where>
    </update>


    <update id="updateSellerOrderStatus2Over">
        UPDATE `order`
        <set>
            `STATUS`=#{status,jdbcType=SMALLINT},
            `STATUS_EX`=#{statusEx,jdbcType=SMALLINT}
        </set>
        <where>
            `NUMBER`=#{number,jdbcType=BIGINT}
            AND `BUYER_USER_ID`=#{buyerUserId,jdbcType=BIGINT}
            AND `LEVEL`= 2
            AND `STATUS` in (2,3,4)
        </where>
    </update>


    <update id="updateItemOrderStatus2Over">
        UPDATE `order`
        <set>
            `STATUS`=#{status,jdbcType=SMALLINT},
            `STATUS_EX`=#{statusEx,jdbcType=SMALLINT}
        </set>
        <where>
            `PARENT_NUMBER`=#{parentNumber,jdbcType=BIGINT}
            AND `BUYER_USER_ID`=#{buyerUserId,jdbcType=BIGINT}
            AND `LEVEL`= 3
            AND `STATUS` in (2,3,4)
        </where>
    </update>

    <update id="updateItemOrderReverseStatusFirstStep">
        UPDATE `order`
        <set>
            `REVERSE_STATUS`=1
        </set>
        <where>
            `NUMBER`=#{number,jdbcType=BIGINT}
            AND `REVERSE_STATUS` in (0,3)
            AND `LEVEL`= 3
            AND `STATUS` in (2,3,4,6)
        </where>
    </update>


    <update id="updateItemOrderReverseStatusOver">
        UPDATE `order`
        <set>
            `REVERSE_STATUS`= #{reverseStatus}
            <if test="reverseStatus==2 or reverseStatus==4">
                ,`STATUS`=5
                ,`status_ex`=5
            </if>
        </set>
        <where>
            `NUMBER`=#{number,jdbcType=BIGINT}
            AND `REVERSE_STATUS` = 1
            AND `LEVEL`= 3
            AND `STATUS` in (2,3,4,6)
        </where>
    </update>

    <update id="updateBatchOrderPayStatus">
        UPDATE `order`
        <set>
            `STATUS`=2,
            `PAY_TIME` = now()
            <if test="orderPayId!=null">
                ,pay_id = #{orderPayId}
            </if>
        </set>
        <where>
            <foreach collection="orderNumberList" item="number" separator="," open=" NUMBER in (" close=")" index="i">
                #{number,jdbcType=BIGINT}
            </foreach>
            AND `STATUS` =0
        </where>
    </update>


    <update id="updateOrderShipStatus">
        UPDATE `order`
        <set>
            `STATUS`=3,
            `SHIP_TIME` = #{shipTime}
        </set>
        <where>
            `NUMBER` = #{orderNumber,jdbcType=BIGINT}
            AND `STATUS` =2
        </where>
    </update>
    
    <update id="updateBatchOrderShipStatus">
        UPDATE `order`
        <set>
            `STATUS`=3,
            `SHIP_TIME` = now()
            <if test="orderPayId!=null">
                ,pay_id = #{orderPayId}
            </if>
        </set>
        <where>
            <foreach collection="orderNumberList" item="number" separator="," open=" NUMBER in (" close=")" index="i">
                #{number,jdbcType=BIGINT}
            </foreach>
            AND `STATUS` =2
            AND `LEVEL` in(2,3)
        </where>
    </update>
    
    <select id="getEmailByNumber" resultType="java.lang.String">
		select email 
		from `order`,employee_user_info 
		where employeeId=buyer_user_id and `NUMBER` = #{orderNumber,jdbcType=BIGINT} 
	</select>
    <update id="updateOrderCloseStatus">
        UPDATE `order`
        <set>
            `STATUS`=5,
            `status_ex`=5
        </set>
        <where>
            `NUMBER` = #{sellerOrderNumber,jdbcType=BIGINT}
            AND `STATUS` in (2,3,4,6)
        </where>
    </update>

    <update id="updateItemOrderThirdOrderNumber">
        UPDATE `order`
        <set>
            `THIRD_ORDER_NUMBER` = #{thirdOrderNumber,jdbcType=VARCHAR}
        </set>
        <where>
            `PARENT_NUMBER`=#{sellerOrderNumber,jdbcType=BIGINT}
            AND `LEVEL`= 3
        </where>
    </update>

    <update id="updateSellerOrderThirdOrderNumber">
        UPDATE `order`
        <set>
            `THIRD_ORDER_NUMBER` = #{thirdOrderNumber,jdbcType=VARCHAR}
        </set>
        <where>
            `NUMBER`=#{sellerOrderNumber,jdbcType=BIGINT}
            AND `LEVEL`= 2
        </where>
    </update>

    <select id="getEnterpriseOrderOverview" resultType="com.lx.benefits.bean.bo.order.OrderOverview">
		select employee.enterprId, count(*) as orderCount, IFNULL(sum(`order`.price)/100,0) as priceTotal, 
			   IFNULL(sum(`order`.point_amount)/100,0) as pointTotal
		from `order`, employee_user_info employee
		where `order`.buyer_user_id=employee.employeeId  and `order`.level=1 and status in(2,3,4,6)
			and employee.enterprId=#{enterprId}
	</select>

    <update id="updateSellerOrderParentNumber">
        UPDATE `order`
        <set>
            `PARENT_NUMBER`=#{payOrderNumber,jdbcType=BIGINT}
        </set>
        <where>
            `NUMBER`=#{sellerOrderNumber,jdbcType=BIGINT}
            AND `LEVEL`= 2
            AND `STATUS` = 0
        </where>
    </update>

    <select id="queryItemOrderList" resultType="com.lx.benefits.bean.vo.order.ItemOrderListVO">
        select
        o.number,
        o.parent_number as sellerOrderNumber,
        o.third_order_number as thirdOrderNumber ,
        o.buyer_comment as buyerComment,
        o.seller_comment as sellerComment,
        o.source,
        e.loginName,
        p.brand_name as brandName,
        p.item_number as itemNumber,
        po.sku_id as skuId,
        sk.sku_code as skuCode,
        sk.spu_code as spuCode,
        po.title,
        po.title_en as titleEn,
        po.image,
        po.spec as goodsSpec,
        po.cost_price/100 as costPrice,
        po.now_price/100 as price,
        po.price/100 as marketPrice,
        o.status,
        o.reverse_status as reverseStatus,
        ifnull(op.pay_channel,0) as payChannel,
        seller.name as sellerName,
        ent.enterpr_name as enterprName,
        os.ship_to_name as shipToName,
        os.ship_to_mobile as shipToMobile,
        os.id_card_no as idCardNo,
        concat(os.ship_to_province,os.ship_to_city,os.ship_to_district,os.ship_to_town,os.ship_to_address) as address,
        (o.price+o.ship_expense+o.point_amount+o.ship_expense_point_amount) /100 as totalPrice,
        (o.ship_expense + o.ship_expense_point_amount) /100 as totalFreightPrice,
        (o.point_amount + o.ship_expense_point_amount) /100 as totalPoint,
        (o.price+o.ship_expense) /100 as totalRealPrice,
        o.quantity,
        c1.name as category1Name,
        c2.name as category2Name,
        c3.name as category3Name,
        o.create_time as createTime,
        o.pay_time as payTime,
        o.ship_time as shipTime,
        o.cancel_time as cancelTime
        from `order` o
        inner join order_ship os on o.parent_number = os.order_number
        inner join product_order_ex po on o.number = po.order_number
        inner join supplier_info seller on o.seller_id = seller.id
        inner join employee_user_info e on o.buyer_user_id = e.employeeId
        inner join product p on o.spu_code = p.spu_code
        inner join sku sk on sk.id = po.sku_id
        inner join enterpr_user_info ent on e.enterprId = ent.enterpr_id
        left join category c1 on c1.id=p.category_id
        left join category c2 on c2.id=p.category_id2
        left join category c3 on c3.id=p.category_id3
        left join order_pay op on o.pay_id = op.`id`
        <include refid="select_where"/>
        order by o.id desc
        <include refid="common.Pagination_Limit"/>
    </select>
    <select id="queryItemOrderCount" resultType="int">
        select
        count(1)
        from `order` o
        inner join order_ship os on o.parent_number = os.order_number
        inner join product_order_ex po on o.number = po.order_number
        inner join supplier_info seller on o.seller_id = seller.id
        inner join employee_user_info e on o.buyer_user_id = e.employeeId
        inner join product p on o.spu_code = p.spu_code
        inner join sku sk on sk.id = po.sku_id
        inner join enterpr_user_info ent on e.enterprId = ent.enterpr_id
        left join order_pay op on o.pay_id = op.`id`
        <include refid="select_where"/>
    </select>


	<resultMap id="sellerOrderInfo_map" type="com.lx.benefits.bean.bo.order.SellerOrderInfo">
		<result column="orderSellerNumber" property="orderSellerNumber"/>
		<result column="totalGoodsPoints" property="totalGoodsPoints"/>
		<result column="totalShipExpense" property="totalShipExpense"/>
		<collection property="productOrders" javaType="List" ofType="com.lx.benefits.bean.bo.order.ProductOrderInfo" autoMapping="true"/>
	</resultMap>
	<select id="getProductOrderDetailsByPayNumber" resultMap="sellerOrderInfo_map">
		select order3.number as orderProductNumber, order3.spu_code as spuId, order3.sku_id as skuId, product_order_ex.title as goodsName,
			 product.goods_type as goodsType, product_order_ex.spec as goodsSpec, product_order_ex.now_price/100 as goodsPrice,
			 order3.quantity, order3.ship_expense_point_amount/100 as shipExpense, order3.status,
			 product.category_id as categoryId, product.category_name as categoryName,
			 product.category_id2 as categoryId2, product.category_name2 as categoryName2,
			 product.category_id3 as categoryId3, product.category_name3 as categoryName3,
			 order2.number as orderSellerNumber, order2.ship_expense_point_amount/100 as totalShipExpense,order2.point_amount/100 as totalGoodsPoints
		from `order` order1
			inner join `order` order2 on order2.parent_number=order1.number 
			inner join `order` order3 on order3.parent_number=order2.number
			left join product_order_ex product_order_ex on order3.number=product_order_ex.order_number
			left join product on order3.spu_code=product.spu_code
		where  order1.number=#{payOrderNumber} and order1.level=1
	</select>
	<select id="countPaidOrderByEnterpr" resultType="int">
		select count(*) 
		from `order`
			inner join employee_user_info on `order`.buyer_user_id=employee_user_info.employeeId and employee_user_info.enterprId=#{enterprId}
		where `order`.level=1 and `order`.status=2 and `order`.create_time between #{startTime} and #{endTime}
	</select>
	<select id="selectPaidOrderByEnterpr" resultType="com.lx.benefits.bean.bo.order.PaidOrderInfo">
		select `order`.number as orderPayNumber, `order`.status as orderStatus, `order`.create_time as createTime,
			(`order`.point_amount+`order`.ship_expense_point_amount)/100 as points
		from `order`
			inner join employee_user_info on `order`.buyer_user_id=employee_user_info.employeeId and employee_user_info.enterprId=#{enterprId}
		where `order`.level=1 and `order`.status=2 and `order`.create_time between #{startTime} and #{endTime}
		limit ${pageBean.offset}, ${pageBean.pageSize}
	</select>
	<select id="sumPaidOrderPointsByEnterpr" resultType="java.math.BigDecimal">
		select  IFNULL((sum(`order`.point_amount)+sum(`order`.ship_expense_point_amount))/100,0.00)
		from `order`
			inner join employee_user_info on `order`.buyer_user_id=employee_user_info.employeeId and employee_user_info.enterprId=#{enterprId}
		where `order`.level=1 and `order`.status=2 and `order`.create_time between #{startTime} and #{endTime}
	</select>
	<select id="listVirtualGoodsOrder" resultMap="BaseResultMap">
		SELECT
        <include refid="Base_Column_List"/>
        FROM
        `order` 
		where level =2
        <foreach collection="sellerOrders" item="number" separator="," open=" and NUMBER in (" close=")">
            #{number,jdbcType=BIGINT}
        </foreach>
        order by id desc
	</select>
	
	<select id="listVirtualOrders" resultMap="BaseResultMap">
		select number,parent_number,quantity,sku_id,buyer_user_id from `order` INNER JOIN  product on `order`.spu_code = product.spu_code 
		and `level` = 3 and goods_type = 1 
      <foreach collection="itemOrderNumbers" item="number" separator="," open=" and NUMBER in (" close=")">
			#{number,jdbcType=BIGINT}
      </foreach>
</select>
</mapper>

